問題文の引用元：https://atcoder.jp/contests/code-festival-2014-qualb/tasks/code_festival_qualB_d
D - 登山家Editorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 256 MB
問題文 : 高橋君は登山家で、いまある山脈を登っています。この山脈には N 個の山小屋が東西へ一直線上に並んでおり、各山小屋には西から東へ順番に、 1 から N までの番号がつけられています。i 番目の山小屋は標高 h_i のところに建てられています。高橋君は各山小屋から、いくつの山小屋を見ることが出来るのか気になりました。i 番目の山小屋から j 番目の山小屋が見える条件は、その間にある山小屋と j 番目の山小屋の標高が全て h_i 以下であることです。各山小屋から見ることが出来る山小屋の個数を求めてください。なお、 i 番目の山小屋から見ることができる山小屋に i 番目の山小屋自身は含まれません。入力入力は以下の形式で標準入力から与えられるNh_1h_2:h_N1 行目には山小屋の数 N (1 ≦ N ≦ 10^5) が与えられる。2 行目からの N 行のうち i 行目には i 番目の山小屋の標高を表す整数 h_i (1 ≦ h_i ≦ 10^5) が与えられる。部分点この問題には部分点が設定されている。1 ≦ N ≦ 3,000を満たすデータセットに正解した場合は 30 点が与えられる。1 ≦ N ≦ 10^5を満たすデータセットに正解した場合はさらに 70 点が与えられる。合計で100点となる。出力出力は N 行からなる。i 行目には i 番目の山小屋から見える山小屋の個数を出力せよ。



#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <deque>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <vector>
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int, int>> vpii;
typedef vector<pair<ll, ll>> vpll;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<vc> vvc;
typedef vector<vs> vvs;
typedef vector<vll> vvll;
typedef map<int, int> mii;
typedef set<int> si;
#define rep(i, n) for (ll i = 0; i < (n); ++i)
#define rrep(i, n) for (int i = 1; i <= (n); ++i)
#define arep(i, v) for (auto i : v)
#define irep(it, stl) for (auto it = stl.begin(); it != stl.end(); it++)
#define drep(i, n) for (int i = (n)-1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p, q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define fi first
#define se second
// #include <atcoder/all>
// using namespace atcoder;
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T>
inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T>
inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T>
inline void dump(T& v) {
    irep(i, v) { cout << (*i) << ((i == --v.end()) ? '\n' : ' '); }
}
template <class T, class U>
inline void dump(map<T, U>& v) {
    irep(i, v) { cout << i->first << " " << i->second << '\n'; }
}
inline string getline() {
    string s;
    getline(cin, s);
    return s;
}
inline void yn(const bool b) { b ? fin("yes") : fin("no"); }
inline void Yn(const bool b) { b ? fin("Yes") : fin("No"); }
inline void YN(const bool b) { b ? fin("YES") : fin("NO"); }
struct io {
    io() {
        ios::sync_with_stdio(false);
        cin.tie(0);
    }
};
template <typename Head, typename Value>
auto vectors(const Head& head, const Value& v) {
    return vector<Value>(head, v);
}
template <typename Head, typename... Tail>
auto vectors(Head x, Tail... tail) {
    auto inner = vectors(tail...);
    return vector<decltype(inner)>(x, inner);
}
const int INF = INT_MAX;
constexpr ll LLINF = 1LL << 61;
constexpr ll MOD = 1000000007;  // 998244353;
constexpr ld EPS = 1e-11;

/* --------------------   ここまでテンプレ   -------------------- */

template <typename T>
class Sum {
   public:
    // 単位元
    T unit;

    Sum(void) {
        // 単位元
        unit = 0;
    }

    // 演算関数
    T calc(T a, T b) { return a + b; }
};

template <typename T>
struct Max {
   public:
    // 単位元
    T unit;

    Max(void) {
        // 単位元
        unit = 0;
    }

    // 演算関数
    T calc(T a, T b) { return max(a, b); }
};

template <typename T, class MONOID>
class SegmentTree {
   public:
    // セグメント木の葉の要素数
    int n;

    // セグメント木
    vector<T> tree;

    // モノイド
    MONOID mono;

    SegmentTree(vector<T>& v)
        : n(1 << (int)ceil(log2(v.size()))),
          tree(vector<T>(n << 1, mono.unit)) {
        for (int i = 0; i < v.size(); ++i) {
            tree[i + n] = v[i];
        }
        for (int i = n - 1; i > 0; --i) {
            tree[i] = mono.calc(tree[i << 1 | 0], tree[i << 1 | 1]);
        }
    }

    SegmentTree(int _n)
        : n(1 << (int)ceil(log2(_n))), tree(vector<T>(n << 1, mono.unit)) {}

    // k番目の値(0-indexed)をxに変更
    void update(int k, T x) {
        k += n;
        tree[k] = x;
        for (k = k >> 1; k > 0; k >>= 1) {
            tree[k] = mono.calc(tree[k << 1 | 0], tree[k << 1 | 1]);
        }
    }

    // k番目の値(0-indexed)をxを加算
    void add(int k, T x) {
        k += n;
        tree[k] += x;
        for (k = k >> 1; k > 0; k >>= 1) {
            tree[k] = mono.calc(tree[k << 1 | 0], tree[k << 1 | 1]);
        }
    }

    // [l, r)の最小値(0-indexed)を求める．
    T query(int l, int r) {
        T res = mono.unit;
        l += n;
        r += n;
        while (l < r) {
            if (l & 1) {
                res = mono.calc(res, tree[l++]);
            }
            if (r & 1) {
                res = mono.calc(res, tree[--r]);
            }
            l >>= 1;
            r >>= 1;
        }
        return res;
    }

    T operator[](int k) {
        // st[i]で添字iの要素の値を返す
        if (k - n >= 0 || k < 0) {
            return -INF;
        }
        return tree[tree.size() - n + k];
    }

    void show(int elements = 31) {
        int ret = 2;
        for (int i = 1; i < max(2 * n, elements); ++i) {
            if (tree[i] == mono.unit)
                cout << "UNIT ";
            else
                cout << tree[i] << " ";
            if (i == ret - 1) {
                cout << endl;
                ret <<= 1;
            }
        }
        cout << endl;
    }
};

int main() {
    int n;
    cin >> n;
    vi v(n);
    rep(i, n) cin >> v[i];
    vi ans(n);
    {
        v.pb(INF);
        SegmentTree<int, Max<int>> st(v);
        // 右側の個数数える
        rep(i, n) {
            int ng = i;         //これがx以下
            int ok = v.size();  // x以上
            // 問題によってokとngを入れ替える
            while (abs(ok - ng) > 1) {
                int mid = (ok + ng) / 2;
                if (st.query(i + 1, mid) > v[i])
                    ok = mid;
                else
                    ng = mid;
            }
            ans[i] += ok - i - 2;
        }
        v.pop_back();
    }
    {
        reverse(all(v));
        reverse(all(ans));
        v.pb(INF);
        SegmentTree<int, Max<int>> st(v);
        // 右側の個数数える
        rep(i, n) {
            int ng = i;         //これがx以下
            int ok = v.size();  // x以上
            // 問題によってokとngを入れ替える
            while (abs(ok - ng) > 1) {
                int mid = (ok + ng) / 2;
                if (st.query(i + 1, mid) > v[i])
                    ok = mid;
                else
                    ng = mid;
            }
            ans[i] += ok - i - 2;
        }
    }
    reverse(all(ans));
    rep(i, n) fin(ans[i]);
}
