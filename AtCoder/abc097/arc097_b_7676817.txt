問題文の引用元：https://atcoder.jp/contests/abc097/tasks/arc097_b
D - EqualsEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 400 点
問題文 : 1 から N までの整数を並び替えた順列 p_1, p_2, .., p_N があります。また、 1 以上 N 以下の整数のペアが M 個与えられます。これらは (x_1,y_1), (x_2,y_2), .., (x_M,y_M) で表されます。シカの AtCoDeer くんは順列 p に次の操作を好きなだけ行って、 p_i = i となる i (1 ≤ i ≤ N) の数を最大にしようと考えています。1 ≤ j ≤ M なる j を選び、 p_{x_j} と p_{y_j} をスワップする操作後の p_i = i となる i の数として考えうる最大値を求めてください。
制約2 ≤ N ≤ 10^51 ≤ M ≤ 10^5p は 1 から N までの整数を並び替えた順列1 ≤ x_j,y_j ≤ Nx_j ≠ y_ji ≠ j なら、 \{x_i,y_i\} ≠ \{x_j,y_j\}入力は全て整数入力入力は以下の形式で標準入力から与えられる。N Mp_1 p_2 .. p_Nx_1 y_1x_2 y_2:x_M y_M出力操作後の p_i = i となる i (1 ≤ i ≤ N) の数として考えうる最大値を出力せよ。
// ソースコードの引用元 : https://atcoder.jp/contests/abc097/submissions/7676817
// 提出ID : 7676817
// 問題ID : arc097_b
// コンテストID : abc097
// ユーザID : xryuseix
// コード長 : 3288
// 実行時間 : 28



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define drep(i,n) for(int i = (n)-1; i >= 0; --i)
#define fin(ans) cout<<(ans)<<endl
#define STI(s) atoi(s.c_str())
#define mp(p,q) make_pair(p,q)
#define pb(n) push_back(n)
#define all(a) a.begin(),a.end()
#define rall(a) a.rbegin(),a.rend()
#define Sort(a) sort(a.begin(),a.end())
#define Rort(a) sort(a.rbegin(),a.rend())
template<class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
template<class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
const int P = 1000000007;
const int INF = INT_MAX;
const ll LLINF = 1LL<<60;

class UnionFind {
public:
    //親の番号を格納する。親だった場合は-(その集合のサイズ)
    vector<int> Parent;
    //作るときはParentの値を全て-1にする
    //こうすると全てバラバラになる
    UnionFind(int N) {
        Parent = vector<int>(N, -1);
    }
    //Aがどのグループに属しているか調べる
    int root(int A) {
        if (Parent[A] < 0) return A;
        return Parent[A] = root(Parent[A]);
    }
    //自分のいるグループの頂点数を調べる
    int size(int A) {
        return -Parent[root(A)];//親をとってきたい]
    }
    //AとBをくっ付ける
    bool connect(int A, int B) {
        //AとBを直接つなぐのではなく、root(A)にroot(B)をくっつける
        A = root(A);
        B = root(B);
        if (A == B) {
            //すでにくっついてるからくっ付けない
            return false;
        }
        //大きい方(A)に小さいほう(B)をくっ付けたい
        //大小が逆だったらひっくり返しちゃう。
        if (size(A) < size(B)) swap(A, B);
        //Aのサイズを更新する
        Parent[A] += Parent[B];
        //Bの親をAに変更する
        Parent[B] = A;
        return true;
    }
};

int main(void){ios::sync_with_stdio(false);cin.tie(0);
//////////////////////////////////////////////////////

    int n,m;
    cin>>n>>m;
    vi p(n);
    rep(i,n)cin>>p[i];

    UnionFind Uni(n);

    for(int i=0;i<m;i++){
        int x,y;
        cin>>x>>y;
        x--;y--;
        if(Uni.root(x)!=Uni.root(y)){
            Uni.connect(x,y);
        }
    }

    ll ans=0;
    for(int i=0;i<n;i++){
        if(Uni.root(p[i]-1)==Uni.root(i)){
            ans++;
        }
    }
    fin(ans);

    

//////////////////////////////////////////////////////
return 0;}

