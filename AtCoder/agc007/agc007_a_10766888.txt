問題文の引用元：https://atcoder.jp/contests/agc007/tasks/agc007_a
A - Shik and StoneEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 256 MB
配点 : 200 点
問題文 :    #nck {      width: 30px;      height: auto;   }縦 H 行、横 W 列のマス目に区切られた盤面があります。はじめ、駒が左上隅のマスに置かれていました。シックはこの駒を 1 マスずつ上下左右に動かし、右下隅のマスに移動させました。このとき、駒が同じマスを複数回通った可能性もあります（左上隅や右下隅のマスも含む）。縦横に並んだ文字 a_{ij} (1 \leq i \leq H, 1 \leq j \leq W) が与えられます。a_{ij} が # のとき、駒が移動する過程で i 行 j 列目のマスを一度以上通ったことを表します（左上隅や右下隅のマスは必ず通ったものとして扱います）。a_{ij} が . のとき、駒が i 行 j 列目のマスを一度も通らなかったことを表します。移動する過程で、駒が常に右または下に動いていた可能性があるか判定してください。
制約2 \leq H, W \leq 8a_{i,j} は # または . である。
問題文 : および a で与えられる情報と整合するような駒の動き方が存在する。入力入力は以下の形式で標準入力から与えられる。H WA_{11}A_{12}...A_{1W}:A_{H1}A_{H2}...A_{HW}出力移動する過程で、駒が常に右または下に動いていた可能性があれば Possible 、なければ Impossible と出力せよ。
// ソースコードの引用元 : https://atcoder.jp/contests/agc007/submissions/10766888
// 提出ID : 10766888
// 問題ID : agc007_a
// コンテストID : agc007
// ユーザID : xryuseix
// コード長 : 3653
// 実行時間 : 1



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <cassert>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <unordered_set>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define irep(it, stl) for(auto it = stl.begin(); it != stl.end(); it++)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define itn int;
#define endl '\n';
int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const int INF = INT_MAX;
const ll LLINF = 1LL<<60;
const ll MOD = 1000000007;
const double EPS = 1e-9;

// 各座標に格納したい情報を構造体にする
// 今回はX座標,Y座標,深さ(距離)を記述している
struct Corr {
    int x;
    int y;
    int depth;
};
queue<Corr> q;
int bfs(vector<string> &grid) {
    // 既に探索の場所を1，探索していなかったら0を格納する配列
    vector<vector<int>> ispassed(grid.size(), vector<int>(grid[0].size(), false));
    // このような記述をしておくと，この後のfor文が綺麗にかける
    int dx[8] = {1, 0};
    int dy[8] = {0, 1};
    while(!q.empty()) {
        Corr now = q.front();q.pop();
        for(int i = 0; i < 4; i++) {
            int nextx = now.x + dx[i];
            int nexty = now.y + dy[i];

            // 次に探索する場所のX座標がはみ出した時
            if(nextx >= grid[0].size()) continue;
            if(nextx < 0) continue;

            // 次に探索する場所のY座標がはみ出した時
            if(nexty >= grid.size()) continue;
            if(nexty < 0) continue;

            // 次に探索する場所が既に探索済みの場合
            if(ispassed[nexty][nextx]) continue;

            if(grid[nexty][nextx]=='.')continue;

            ispassed[nexty][nextx] = true;
            grid[nexty][nextx]='.';
            Corr next = {nextx, nexty, now.depth+1};
            q.push(next);
            break;
        }
    }
    return 0;
}

int main() {
    
    int h,w;
    cin>>h>>w;
    vs v(h);
    rep(i,h)cin>>v[i];
    Corr c{0,0};
    q.push(c);
    v[0][0]='.';
    bfs(v);
    bool ans=0;
    rep(i,h)rep(j,w)if(v[i][j]=='#')ans=1;
    if(!ans)fin("Possible");
    else fin("Impossible");
    // rep(i,h){
    //     rep(j,w){
    //         cout<<v[i][j];
    //     }
    //     cout<<endl;
    // }
}
