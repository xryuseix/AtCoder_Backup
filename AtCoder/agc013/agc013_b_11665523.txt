問題文の引用元：https://atcoder.jp/contests/agc013/tasks/agc013_b
B - Hamiltonish PathEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 256 MB
配点 : 500 点
問題文 : N 頂点 M 辺の、連結な単純無向グラフが与えられます。頂点には 1 から N までの番号がついており、辺には 1 から M までの番号がついています。辺 i は、頂点 A_i と頂点 B_i を結んでいます。次の条件を満たすパスを 1 つ見つけて、出力してください。2 個以上の頂点を通る同じ頂点を 2 度以上通らないパスの少なくとも一方の端点と直接辺で結ばれている頂点は、必ずパスに含まれるただし、この問題の
制約の下で、このようなパスが必ず存在することが証明できます。また、あり得る答えのうちどれを出力しても構いません。
制約2 \leq N \leq 10^51 \leq M \leq 10^51 \leq A_i < B_i \leq N与えられるグラフは連結かつ単純（どの 2 頂点を直接結ぶ辺も高々 1 つ）である入力入力は以下の形式で標準入力から与えられる。N MA_1 B_1A_2 B_2:A_M B_M出力条件を満たすパスを 1 つ見つけて出力せよ。出力の 1 行目には、パスに含まれる頂点の個数を出力せよ。出力の 2 行目には、パスに含まれる頂点の番号を、パスを形成するような順序で、空白区切りにして出力せよ。
// ソースコードの引用元 : https://atcoder.jp/contests/agc013/submissions/11665523
// 提出ID : 11665523
// 問題ID : agc013_b
// コンテストID : agc013
// ユーザID : xryuseix
// コード長 : 5207
// 実行時間 : 100



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <cassert>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <random>
#include <unordered_set>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
typedef map<int, int> mii;
typedef set<int> si;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define irep(it, stl) for(auto it = stl.begin(); it != stl.end(); it++)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define itn int
#define endl '\n';
#define fi first
#define se second
#define NONVOID [[nodiscard]]
const int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
const int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
inline string getline(){string s; getline(cin,s); return s;}
inline void yn(const bool b){b?fin("yes"):fin("no");}
inline void Yn(const bool b){b?fin("Yes"):fin("No");}
inline void YN(const bool b){b?fin("YES"):fin("NO");}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const int INF = INT_MAX;
const ll LLINF = 1LL<<60;
const ll MOD = 1000000007;
const double EPS = 1e-9;

vi path[2];
vvi g(101010);
vi ispassed(101010,false);

class UnionFind {
public:
    // 親の番号を格納．親だった場合は-(その集合のサイズ)
    vector<int> Parent;
    // 重さの差を格納
    vector<ll> diffWeight;

    UnionFind(const int N) {
        Parent = vector<int>(N, -1);
        diffWeight = vector<ll>(N, 0);
    }

    // Aがどのグループに属しているか調べる
    int root(const int A) {
        if (Parent[A] < 0) return A;
        int Root = root(Parent[A]);
        diffWeight[A] += diffWeight[Parent[A]];
        return Parent[A] = Root;
    }

    // 自分のいるグループの頂点数を調べる
    int size(const int A) {
        return -Parent[root(A)];
    }

    // 自分の重さを調べる
    ll weight(const int A) {
        root(A); // 経路圧縮
        return diffWeight[A];
    }

    // 重さの差を計算する
    ll diff(const int A, const int B) {
        return weight(B) - weight(A);
    }

    // AとBをくっ付ける
    bool connect(int A, int B, ll W = 0) {
        // Wをrootとの重み差分に変更
        W += weight(A);
        W -= weight(B);

        // AとBを直接つなぐのではなく、root(A)にroot(B)をくっつける
        A = root(A);
        B = root(B);

        if (A == B) {
            //すでにくっついてるからくっ付けない
            return false;
        }

        // 大きい方(A)に小さいほう(B)をくっ付ける
        // 大小が逆だったらひっくり返す
        if (size(A) < size(B)) {
            swap(A, B);
            W = -W;
        }

        // Aのサイズを更新する
        Parent[A] += Parent[B];
        // Bの親をAに変更する
        Parent[B] = A;

        // AはBの親であることが確定しているのでBにWの重みを充てる
        diffWeight[B] = W;

        return true;
    }
};

int dfs(int pos, int mode){
    bool ch=1;
    path[mode].pb(pos);
    ispassed[pos]=1;
    rep(i,g[pos].size()){
        int nextPos=g[pos][i];
        if(ispassed[nextPos])continue;
        ch&=dfs(nextPos, mode);
        if(!ch)break;
    }
    return 0;
}

int main() {

    int n,m;
    cin>>n>>m;
    UnionFind uni(n);
    rep(i,m){
        int a,b;
        cin>>a>>b;
        a--;b--;
        g[a].pb(b);
        g[b].pb(a);
        uni.connect(a,b);
    }
    rep(i,n){
        if(uni.size(i)>=2){
            dfs(i,0);
            dfs(i,1);
            vi ans;
            for(int j=path[1].size()-1;j>=0;j--){
                ans.pb(path[1][j]);
            }
            for(int j=1;j<path[0].size();j++){
                ans.pb(path[0][j]);
            }
            cout<<ans.size()<<endl;
            rep(j,ans.size()){
                if(!j)cout<<ans[i]+1;
                else cout<<" "<<ans[j]+1;
            }
            cout<<endl;
            return 0;
        }
    }
}

