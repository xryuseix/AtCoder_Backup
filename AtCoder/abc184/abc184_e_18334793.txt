問題文の引用元：https://atcoder.jp/contests/abc184/tasks/abc184_e
E - Third AvenueEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 3 sec / Memory Limit : 1024 MB
配点 : 500 点
問題文 : 縦 H マス、横 W マスの 2 次元グリッドで表された街があります。上から i 行目、左から j 列目のマスの情報が文字 a_{i,j} により与えられます。 a_{i,j} は S , G , . , # , a ~ z のいずれかです。# は入ることができないマスを、a ~ z はテレポーターのあるマスを表します。高橋くんははじめ S のマスにおり、 1 秒ごとに以下のいずれかの移動を行います。現在いるマスと上下左右に隣り合う、# でないマスに移動する。今いるマスと同じ文字が書かれているマスを 1 つ選び、そこにテレポートする。この移動は現在いるマスが a ~ z のいずれかであるとき使える。高橋くんが S のマスから G のマスに移動するのに必要な最短の時間を求めてください。ただし、どうしても G のマスにたどり着けない場合は、代わりに -1 を出力してください。
制約1 \le H, W \le 2000a_{i,j} は S , G , . , # , 英小文字のいずれかS のマスと G のマスはちょうど 1 つ存在する入力入力は以下の形式で標準入力から与えられる。H Wa_{1,1}\dots a_{1,W}\vdotsa_{H,1}\dots a_{H,W}出力S のマスから G のマスに移動するのに必要な最短時間を出力せよ。S のマスから G のマスに移動する方法が存在しない場合は、代わりに -1 を出力せよ。



#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <deque>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <vector>
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int, int>> vpii;
typedef vector<pair<ll, ll>> vpll;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<vc> vvc;
typedef vector<vs> vvs;
typedef vector<vll> vvll;
typedef map<int, int> mii;
typedef set<int> si;
#define rep(i, n) for (ll i = 0; i < (n); ++i)
#define rrep(i, n) for (int i = 1; i <= (n); ++i)
#define arep(i, v) for (auto i : v)
#define irep(it, stl) for (auto it = stl.begin(); it != stl.end(); it++)
#define drep(i, n) for (int i = (n)-1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p, q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define fi first
#define se second
// #include <atcoder/all>
// using namespace atcoder;
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T>
inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T>
inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T>
inline void dump(T& v) {
    irep(i, v) { cout << (*i) << ((i == --v.end()) ? '\n' : ' '); }
}
template <class T, class U>
inline void dump(map<T, U>& v) {
    irep(i, v) { cout << i->first << " " << i->second << '\n'; }
}
inline string getline() {
    string s;
    fflush(stdin);
    getline(cin, s);
    return s;
}
inline void yn(const bool b) { b ? fin("yes") : fin("no"); }
inline void Yn(const bool b) { b ? fin("Yes") : fin("No"); }
inline void YN(const bool b) { b ? fin("YES") : fin("NO"); }
struct io {
    io() {
        ios::sync_with_stdio(false);
        cin.tie(0);
    }
};
template <typename Head, typename Value>
auto vectors(const Head& head, const Value& v) {
    return vector<Value>(head, v);
}
template <typename Head, typename... Tail>
auto vectors(Head x, Tail... tail) {
    auto inner = vectors(tail...);
    return vector<decltype(inner)>(x, inner);
}
const int INF = INT_MAX;
constexpr ll LLINF = 1LL << 61;
constexpr ll MOD = 1000000007;  // 998244353;
constexpr ld EPS = 1e-11;

/* --------------------   ここまでテンプレ   -------------------- */

class DIJKSTRA {
   public:
    int V;

    struct dk_edge {
        int to;
        int cost;
    };

    typedef pair<ll, int> PI;  // firstは最短距離、secondは頂点の番号
    vector<vector<dk_edge>> G;
    vector<int> d;     //これ答え。d[i]:=V[i]までの最短距離

    DIJKSTRA(int size) {
        V = size;
        G = vector<vector<dk_edge>>(V);
    }

    void add(int from, int to, int cost) {
        dk_edge e1 = {to, cost};
        dk_edge e2 = {from, cost};
        G[from].push_back(e1);
        G[to].push_back(e2);
    }

    void dijkstra(int s) {
        // greater<P>を指定することでfirstが小さい順に取り出せるようにする
        priority_queue<PI, vector<PI>, greater<PI>> que;
        d = vector<int>(V, INF);
        d[s] = 0;
        que.push(PI(0, s));

        while (!que.empty()) {
            PI p = que.top();
            que.pop();
            int v = p.second;
            if (d[v] < p.first) continue;
            for (int i = 0; i < G[v].size(); i++) {
                dk_edge e = G[v][i];
                if (d[e.to] > d[v] + e.cost) {
                    d[e.to] = d[v] + e.cost;
                    que.push(PI(d[e.to], e.to));
                }
            }
        }
    }
};
int main() {
    int h, w;
    cin >> h >> w;
    int s, g;
    vs v(h);
    DIJKSTRA dj(h * w + 26);
    vvi al(26);
    rep(i, h) {
        cin >> v[i];
        rep(j, w) {
            if (v[i][j] == '#') continue;
            if (v[i][j] == '.') continue;
            if (v[i][j] == 'S') {
                s = i * w + j;
                continue;
            } else if (v[i][j] == 'G') {
                g = i * w + j;
                continue;
            } else {
                dj.add(i * w + j, h * w + (v[i][j]-'a'), 1);
            }
        }
    }
    rep(i, h) {
        rep(j, w - 1) {
            if (v[i][j] == '#' || v[i][j + 1] == '#') continue;
            dj.add(i * w + j, i * w + j + 1, 2);
        }
    }
    rep(j, w) {
        rep(i, h - 1) {
            if (v[i][j] == '#' || v[i + 1][j] == '#') continue;
            dj.add(i * w + j, (i + 1) * w + j, 2);
        }
    }
    dj.dijkstra(s);
    if (dj.d[g] == INF)
        fin(-1);
    else
        cout << dj.d[g]/2 << endl;
}
