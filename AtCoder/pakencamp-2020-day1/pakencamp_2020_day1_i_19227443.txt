問題文の引用元：https://atcoder.jp/contests/pakencamp-2020-day1/tasks/pakencamp_2020_day1_i
I - くねくねEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 3.5 sec / Memory Limit : 1024 MB                                        
配点 : 400 点                
問題文 :                                     縦 H マス、横 W マスの H×W マスからなる迷路があります。                    上から i 行目、左から j 列目のマス (i,\ j) は、S_{i,j} が #                    のとき壁であり、. のとき道です。                                                    マス (sx,\ sy) にうなぎがいて、マス (gx,\ gy) まで移動しようとしています。                    うなぎは 1 回の移動で、今いるマスと隣接する道マスに移動することができます。この際、迷路の外への移動はできません。                                うなぎはくねくね動くのが好きです。そこで、迷路をプレイする際に以下の制限を設けることにしました。                                    i 回目の移動で上下に移動した場合、i+1 回目の移動では左右に移動しなければならない。                    i 回目の移動で左右に移動した場合、i+1 回目の移動では上下に移動しなければならない。                    最初の移動では、どの方向にも動くことができる。                                うなぎはこの制限を守った上で、マス (gx,\ gy) まで移動できるでしょうか？                    移動できるか判定した上で、移動できる場合は必要な移動回数の最小値を求めてください。                                                                
制約                            1\leq H,\ W\leq2000                1\leq sx,\ gx\leq H                1\leq sy,\ gy\leq W                S_{i,j} は # か .                S_{sx,sy} と S_{gx,gy} は .                (sx,\ sy)≠(gx,\ gy)                H,\ W,\ sx,\ sy,\ gx,\ gy は整数                                                                            入力                    入力は以下の形式で標準入力から与えられます。                    \(H\) \(W\)\(sx\) \(sy\) \(gx\) \(gy\)\(S_{1,1}\) \(S_{1,2}\) \(\ldots\) \(S_{1,W}\)\(S_{2,1}\) \(S_{2,2}\) \(\ldots\) \(S_{2,W}\)\(⋮\)\(S_{H,1}\) \(S_{H,2}\) \(\ldots\) \(S_{H,W}\)                                                                            出力                    うなぎがマス (gx,\ gy) まで移動できる場合は移動回数の最小値を、移動できない場合は -1 を出力してください。                        出力の最後に改行を忘れないでください。                                                                        



#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <deque>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <vector>
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int, int>> vpii;
typedef vector<pair<ll, ll>> vpll;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<vc> vvc;
typedef vector<vs> vvs;
typedef vector<vll> vvll;
typedef map<int, int> mii;
typedef set<int> si;
#define rep(i, n) for (ll i = 0; i < (n); ++i)
#define rrep(i, n) for (int i = 1; i <= (n); ++i)
#define irep(it, stl) for (auto it = stl.begin(); it != stl.end(); it++)
#define drep(i, n) for (int i = (n)-1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p, q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define fi first
#define se second
// #include <atcoder/all>
// using namespace atcoder;
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T, class U>
inline bool chmax(T& a, U b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T, class U>
inline bool chmin(T& a, U b) {
    if (a > b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T>
inline void dump(T& v) {
    irep(i, v) { cout << (*i) << ((i == --v.end()) ? '\n' : ' '); }
}
template <class T, class U>
inline void dump(map<T, U>& v) {
    irep(i, v) { cout << i->first << " " << i->second << '\n'; }
}
template <class T, class U>
inline void dump(pair<T, U>& p) {
    cout << p.first << " " << p.second << '\n';
}
string getline() {
    string s;
    fflush(stdin);
    getline(cin, s);
    return s;
}
inline void yn(const bool b) { b ? fin("yes") : fin("no"); }
inline void Yn(const bool b) { b ? fin("Yes") : fin("No"); }
inline void YN(const bool b) { b ? fin("YES") : fin("NO"); }
template <typename Head, typename Value>
auto vectors(const Head& head, const Value& v) {
    return vector<Value>(head, v);
}
template <typename Head, typename... Tail>
auto vectors(Head x, Tail... tail) {
    auto inner = vectors(tail...);
    return vector<decltype(inner)>(x, inner);
}
const int INF = INT_MAX;
constexpr ll LLINF = 1LL << 61;
constexpr ll MOD = 1000000007;  // 998244353;
constexpr ld EPS = 1e-11;

/* --------------------   ここまでテンプレ   -------------------- */

int sx, sy, gx, gy;
int h, w;
// 各座標に格納したい情報を構造体にする
// 今回はX座標,Y座標,深さ(距離)を記述している
struct Corr {
    int x;
    int y;
    int depth;
    int move;  // 0なら上下，1なら左右
};
queue<Corr> q;
int ans = INF;
void bfs(vs v) {
    // 既に探索の場所を1，探索していなかったら0を格納する配列
    vector<vvi> ispassed(h, vvi(w, vi(2, INF)));
    ispassed[0][0][q.front().move]=0;
    // このような記述をしておくと，この後のfor文が綺麗にかける
    while (!q.empty()) {
        Corr now = q.front();
        q.pop();
        // cout << now.x << " " << now.y << " " << now.depth << " " << now.depth
            //  << endl;
        if (now.x == gx && now.y == gy) {
            chmin(ans, now.depth);
        }
        int dx[2] = {0};
        int dy[2] = {0};
        if (now.move == 0) {
            dy[0] = 1;
            dy[1] = -1;
        } else {
            dx[0] = 1;
            dx[1] = -1;
        }
        for (int i = 0; i < 2; i++) {
            int nextx = now.x + dx[i];
            int nexty = now.y + dy[i];

            // 次に探索する場所のX座標がはみ出した時
            if (nextx >= w) continue;
            if (nextx < 0) continue;

            // 次に探索する場所のY座標がはみ出した時
            if (nexty >= h) continue;
            if (nexty < 0) continue;

            // 次に探索する場所が既に探索済みの場合
            if (v[nexty][nextx] == '#') continue;
            if (!chmin(ispassed[nexty][nextx][now.move], now.depth)) continue;

            ispassed[nexty][nextx][now.move] = true;
            Corr next = {nextx, nexty, now.depth + 1, 1 - now.move};
            q.push(next);
        }
        // rep(i,h){
        //     fin(v[i]);
        // }
        // fin("-------------");
    }
}
int main() {
    cin >> h >> w >> sy >> sx >> gy >> gx;
    sx--;
    sy--;
    gx--;
    gy--;
    vs v(h);
    rep(i, h) cin >> v[i];
    Corr c = {sx, sy, 0, 0};
    q.push(c);
    bfs(v);
    Corr c2 = {sx, sy, 0, 1};
    q.push(c2);
    bfs(v);
    if (ans == INF)
        fin(-1);
    else
        fin(ans);
}
