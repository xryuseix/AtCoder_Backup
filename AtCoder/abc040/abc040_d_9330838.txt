問題文の引用元：https://atcoder.jp/contests/abc040/tasks/abc040_d
D - 道路の老朽化対策について / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 256 MB
問題文 : ある国には N 個の都市があり、それぞれ 1 から N までの番号がつけられています。これらの都市間を結ぶ M 本の道路があり、i 本目の道路は都市 a_i と都市 b_i を結ぶもので、y_i 年に造られたものです。この国の国民はとても心配性なので、あまりに古い道は事故の危険性が高いと考えて使わないことがあります。そこであなたは、この国の交通状況を調査することにしました。Q 人の国民の情報が与えられます。j 人目の国民について、都市 v_j に住んでおり、造られた年が w_j 年以前 (w_j 年ちょうども含む) であるような道路を使わないことがわかっています。それぞれの国民に対し、その人が住んでいる都市から道路のみを使って行き来できるような都市の個数を求めてください。
制約1 ≦ N ≦ 100,0000 ≦ M ≦ 200,0001 ≦ a_i,b_i ≦ Na_i ≠ b_i1 ≦ y_i ≦ 200,0001 ≦ Q ≦ 100,0001 ≦ v_j ≦ N0 ≦ w_j ≦ 200,000部分点50 点分のテストケースでは、N ≦ 1,000, M ≦ 2,000, Q ≦ 1,000 をみたす。入力入力は以下の形式で標準入力から与えられる。N Ma_1 b_1 y_1:a_M b_M y_MQv_1 w_1:v_Q w_Q出力Q 行出力せよ。そのうちの j 行目には、j 人目の国民が道路のみを使って行き来可能な都市の個数を出力せよ。10474



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <unordered_set>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STI(s) atoi(s.c_str())
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define itn int
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const ll MOD = 1000000007;
const double EPS = 1e-9;
const int INF = INT_MAX;
const ll LLINF = 1LL<<60;

class UnionFind {
public:
    // 親の番号を格納する。親だった場合は-(その集合のサイズ)
    vector<int> Parent;

    UnionFind(int N) {
        Parent = vector<int>(N, -1);
    }

    // Aがどのグループに属しているか調べる
    int root(int A) {
        if (Parent[A] < 0) return A;
        return Parent[A] = root(Parent[A]);
    }

    // 自分のいるグループの頂点数を調べる
    int size(int A) {
        return -Parent[root(A)];//親をとってきたい]
    }

    // AとBをくっ付ける
    bool connect(int A, int B) {
        // AとBを直接つなぐのではなく、root(A)にroot(B)をくっつける
        A = root(A);
        B = root(B);
        if (A == B) {
            //すでにくっついてるからくっ付けない
            return false;
        }

        // 大きい方(A)に小さいほう(B)をくっ付ける
        // 大小が逆だったらひっくり返す
        if (size(A) < size(B)) {
            swap(A, B);
        }

        // Aのサイズを更新する
        Parent[A] += Parent[B];
        // Bの親をAに変更する
        Parent[B] = A;

        return true;
    }
};

int main(void) {

    ll n,m;
    cin>>n>>m;
    vector<pair<ll,pair<ll,ll>>> v;
    rep(i,m){
        ll a,b,c;
        cin>>a>>b>>c;
        a--;b--;
        v.pb(mp(c,mp(a,b)));
    }
    ll q;
    cin>>q;
    vector<pair<ll,pair<ll,ll>>> qe;
    rep(i,q){
        ll a,b;
        cin>>a>>b;
        a--;
        qe.pb(mp(b,mp(a,i)));
    }
    Rort(qe);
    Rort(v);

    UnionFind uni(n);
    ll pos=0;
    vector<pair<ll,ll>> ans;
    for(int i=0;i<q;i++){
        // cout<<v[pos].first<<" "<<qe[i].first<<endl;
        while(pos<m&&v[pos].first>qe[i].first){
            uni.connect(v[pos].second.first,v[pos].second.second);
            pos++;
        }
        // cout<<pos<<endl;
        ans.pb(mp(qe[i].second.second, uni.size(qe[i].second.first)));
    }
    Sort(ans);
    rep(i,ans.size()){
        cout<<ans[i].second<<endl;
    }

}
