問題文の引用元：https://atcoder.jp/contests/abc157/tasks/abc157_d
D - Friend SuggestionsEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 400 点
問題文 : とあるSNSに、人 1 、人 2、 \cdots、人 N が登録しています。この N 人の間には、 M 組の「友達関係」と、 K 組の「ブロック関係」が存在します。i = 1, 2, \cdots, M について、人 A_i と人 B_i は友達関係にあります。この関係は双方向的です。i = 1, 2, \cdots, K について、人 C_i と人 D_i はブロック関係にあります。この関係は双方向的です。以下の 4 つの条件が満たされるとき、人 a は人 b の「友達候補」であると定義します。a \neq b である。人 a と人 b はブロック関係に無い。人 a と人 b は友達関係に無い。1 以上 N 以下の整数から成るある数列 c_0, c_1, c_2, \cdots, c_L が存在し、c_0 = a であり、 c_L = b であり、 i = 0, 1, \cdots, L - 1 について、人 c_i と人 c_{i+1} は友達関係にある。人 i = 1, 2, ... N について、友達候補の数を答えてください。
制約入力は全て整数2 ≤ N ≤ 10^50 \leq M \leq 10^50 \leq K \leq 10^51 \leq A_i, B_i \leq NA_i \neq B_i1 \leq C_i, D_i \leq NC_i \neq D_i(A_i, B_i) \neq (A_j, B_j) (i \neq j)(A_i, B_i) \neq (B_j, A_j)(C_i, D_i) \neq (C_j, D_j) (i \neq j)(C_i, D_i) \neq (D_j, C_j)(A_i, B_i) \neq (C_j, D_j)(A_i, B_i) \neq (D_j, C_j)入力入力は以下の形式で標準入力から与えられる。N M KA_1 B_1\vdotsA_M B_MC_1 D_1\vdotsC_K D_K出力答えを空白区切りで順に出力せよ。
// ソースコードの引用元 : https://atcoder.jp/contests/abc157/submissions/10767017
// 提出ID : 10767017
// 問題ID : abc157_d
// コンテストID : abc157
// ユーザID : xryuseix
// コード長 : 3711
// 実行時間 : 145



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <cassert>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <unordered_set>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define irep(it, stl) for(auto it = stl.begin(); it != stl.end(); it++)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define itn int;
#define endl '\n';
int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const int INF = INT_MAX;
const ll LLINF = 1LL<<60;
const ll MOD = 1000000007;
const double EPS = 1e-9;

class UnionFind {
public:
    // 親の番号を格納する。親だった場合は-(その集合のサイズ)
    vector<int> Parent;

    UnionFind(int N) {
        Parent = vector<int>(N, -1);
    }

    // Aがどのグループに属しているか調べる
    int root(int A) {
        if (Parent[A] < 0) return A;
        return Parent[A] = root(Parent[A]);
    }

    // 自分のいるグループの頂点数を調べる
    int size(int A) {
        return -Parent[root(A)];//親をとってきたい]
    }

    // AとBをくっ付ける
    bool connect(int A, int B) {
        // AとBを直接つなぐのではなく、root(A)にroot(B)をくっつける
        A = root(A);
        B = root(B);
        if (A == B) {
            //すでにくっついてるからくっ付けない
            return false;
        }

        // 大きい方(A)に小さいほう(B)をくっ付ける
        // 大小が逆だったらひっくり返す
        if (size(A) < size(B)) {
            swap(A, B);
        }

        // Aのサイズを更新する
        Parent[A] += Parent[B];
        // Bの親をAに変更する
        Parent[B] = A;

        return true;
    }
};

int main() {
    
    int n,m,k;
    cin>>n>>m>>k;
    vi block(n,0);
    UnionFind uni(n);
    vvi v(n);
    rep(i,m){
        int a,b;
        cin>>a>>b;
        a--;b--;
        uni.connect(a,b);
        v[a].pb(b);
        v[b].pb(a);
    }
    rep(i,k){
        int c,d;
        cin>>c>>d;
        c--;d--;
        if(uni.root(c)==uni.root(d)){
            block[c]++;
            block[d]++;
        }
    }
    rep(i,n){
        // cout<<uni.size(i)<<" "<<block[i]<<" "<<v[i].size()<<endl;
        int ans=uni.size(i)-block[i]-v[i].size()-1;
        if(!i)cout<<ans;
        else cout<<" "<<ans;
    }
    cout<<endl;
}
