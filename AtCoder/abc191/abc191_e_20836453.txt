問題文の引用元：https://atcoder.jp/contests/abc191/tasks/abc191_e
E - Come Back QuicklyEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 3 sec / Memory Limit : 1024 MB
配点 : 500 点
問題文 : AtCoder 国には、町 1 から町 N までの N 個の町と、道路 1 から道路 M までの M 本の道路があります。道路 i は町 A_i から町 B_i への一方通行で、通るのに C_i 分かかります。A_i = B_i かもしれませんし、同じ町の組を結ぶ道路が複数あるかもしれません。高橋君はこの国で散歩をしようと考えました。ある町から出発し、1 本以上の道路を通り、出発した町に帰ってくるような経路を正しい散歩経路と呼ぶことにします。各町について、その町から出発する正しい散歩経路が存在するかを判定してください。また、存在するなら、そのような経路を通るのにかかる時間の最小値を求めてください。  
制約1 \le N \le 20001 \le M \le 20001 \le A_i \le N1 \le B_i \le N1 \le C_i \le 10^5入力は全て整数入力入力は以下の形式で標準入力から与えられる。N MA_1 B_1 C_1A_2 B_2 C_2A_3 B_3 C_3\hspace{25pt} \vdotsA_M B_M C_M出力N 行に渡って出力せよ。 i(1 \le i \le N) 行目には以下を出力せよ。町 i から出発する正しい散歩経路が存在するなら、そのような経路を通るのにかかる時間の最小値存在しないなら -1



#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <deque>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <vector>
#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int, int>> vpii;
typedef vector<pair<ll, ll>> vpll;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<vc> vvc;
typedef vector<vs> vvs;
typedef vector<vll> vvll;
typedef pair<int, int> P;
typedef map<int, int> mii;
typedef set<int> si;
#define rep(i, n) for (ll i = 0; i < (n); ++i)
#define rrep(i, n) for (int i = 1; i <= (n); ++i)
#define irep(it, stl) for (auto it = stl.begin(); it != stl.end(); it++)
#define drep(i, n) for (int i = (n)-1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p, q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define fi first
#define se second
// #include <atcoder/all>
// using namespace atcoder;
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T, class U>
inline bool chmax(T& a, U b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T, class U>
inline bool chmin(T& a, U b) {
    if (a > b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T>
inline void dump(T& v) {
    irep(i, v) { cout << (*i) << ((i == --v.end()) ? '\n' : ' '); }
}
template <class T, class U>
inline void dump(map<T, U>& v) {
    irep(i, v) { cout << i->first << " " << i->second << '\n'; }
}
template <class T, class U>
inline void dump(pair<T, U>& p) {
    cout << p.first << " " << p.second << '\n';
}
// string getline() {
//     string s;
//     fflush(stdin);
//     getline(cin, s);
//     return s;
// }
inline void yn(const bool b) { b ? fin("yes") : fin("no"); }
inline void Yn(const bool b) { b ? fin("Yes") : fin("No"); }
inline void YN(const bool b) { b ? fin("YES") : fin("NO"); }
const int INF = INT_MAX;
constexpr ll LLINF = 1LL << 61;
constexpr ll MOD = 1000000007;  // 998244353;
constexpr ld EPS = 1e-11;

/* --------------------   ここまでテンプレ   -------------------- */

class DIJKSTRA {
   public:
    int V;

    struct dk_edge {
        int to;
        ll cost;
    };

    typedef pair<ll, int> PI;  // firstは最短距離、secondは頂点の番号
    vector<vector<dk_edge>> G;
    vector<ll> d;      //これ答え。d[i]:=V[i]までの最短距離
    vector<int> prev;  //経路復元

    DIJKSTRA(int size) {
        V = size;
        G = vector<vector<dk_edge>>(V);
        prev = vector<int>(V, -1);
    }

    void add(int from, int to, ll cost) {
        dk_edge e = {to, cost};
        G[from].push_back(e);
    }

    void dijkstra(int s) {
        // greater<P>を指定することでfirstが小さい順に取り出せるようにする
        priority_queue<PI, vector<PI>, greater<PI>> que;
        d = vector<ll>(V, LLINF);
        d[s] = 0;
        que.push(PI(0, s));

        while (!que.empty()) {
            PI p = que.top();
            que.pop();
            int v = p.second;
            if (d[v] < p.first) continue;
            for (int i = 0; i < G[v].size(); i++) {
                dk_edge e = G[v][i];
                if (d[e.to] > d[v] + e.cost) {
                    d[e.to] = d[v] + e.cost;
                    prev[e.to] = v;
                    que.push(PI(d[e.to], e.to));
                }
            }
        }
    }
    vector<int> get_path(int t) {
        vector<int> path;
        for (; t != -1; t = prev[t]) {
            // tがsになるまでprev[t]をたどっていく
            path.push_back(t);
        }
        //このままだとt->sの順になっているので逆順にする
        reverse(path.begin(), path.end());
        return path;
    }
    void show(void) {
        for (int i = 0; i < d.size() - 1; i++) {
            cout << d[i] << " ";
        }
        cout << d[d.size() - 1] << endl;
    }
};

int main() {
    int n, m;
    cin >> n >> m;
    map<pair<int, int>, int> rev;
    vvi v(n);
    DIJKSTRA dk(n);
    map<pair<int, int>, int> edge;
    rep(i, m) {
        int a, b, c;
        cin >> a >> b >> c;
        a--;
        b--;
        if (edge[mp(a, b)] == 0) {
            edge[mp(a, b)] = c;
        } else {
            chmin(edge[mp(a, b)], c);
        }
    }
    irep(i, edge) {
        int a = i->first.first;
        int b = i->first.second;
        int c = i->second;
        dk.add(a, b, c);
        rev[mp(b, a)] = c;
        v[b].pb(a);
    }
    rep(i, n) {
        if (v[i].size() == 0) {
            fin(-1);
            continue;
        }
        dk.dijkstra(i);
        ll ans = LLINF;
        for (auto p : v[i]) {
            if (rev.find(mp(i, p)) == rev.end()) {
                continue;
            }
            chmin(ans, rev[mp(i, p)] + dk.d[p]);
        }
        if (ans == LLINF)
            fin(-1);
        else
            fin(ans);
    }
}
