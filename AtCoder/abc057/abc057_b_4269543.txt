問題文の引用元：https://atcoder.jp/contests/abc057/tasks/abc057_b
B - CheckpointsEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 256 MB
配点 : 200 点
問題文 : xy 平面があり、その上に N 人の学生がいて、M 個のチェックポイントがあります。i 番目の学生がいる座標は (a_i,b_i) (1≦i≦N) であり、番号 j のチェックポイントの座標は (c_j,d_j) (1≦j≦M) です。     これから合図があり、各学生はマンハッタン距離で一番近いチェックポイントに集合しなければなりません。 2つの地点 (x_1,y_1) と (x_2,y_2) 間のマンハッタン距離は |x_1-x_2|+|y_1-y_2| で表されます。ここで、|x| は x の絶対値を表します。ただし、一番近いチェックポイントが複数ある場合には、番号が最も小さいチェックポイントに移動することとします。合図の後に、各学生がどのチェックポイントに移動するかを求めてください。  
制約1≦N,M≦50-10^8≦a_i,b_i,c_j,d_j≦10^8 入力は全て整数である。 入力入力は以下の形式で標準入力から与えられる。N Ma_1 b_1:  a_N b_Nc_1 d_1:  c_M d_M出力解答を N 行に出力せよ。i (1 ≦i≦N) 番目の行には、i 番目の学生が訪れるチェックポイントの番号を出力せよ。  
// ソースコードの引用元 : https://atcoder.jp/contests/abc057/submissions/4269543
// 提出ID : 4269543
// 問題ID : abc057_b
// コンテストID : abc057
// ユーザID : xryuseix
// コード長 : 864
// 実行時間 : 1



#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstdio>
#include<string>
#include<vector>
#include<list>
#include<set>
#include<cctype>
#define ld long double
#define ll long long int
#define ull unsigned long long int
using namespace std;
template<class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
template<class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
const long long INF=1LL<<60;


int main(void){
	ios::sync_with_stdio(false); cin.tie(0);
	
	int i,j,n,m,min,num;
	cin>>n>>m;
	int dis,a[n],b[n],c[m],d[m];
	for(i=0;i<n;i++)cin>>a[i]>>b[i];
	for(i=0;i<m;i++)cin>>c[i]>>d[i];
	for(i=0;i<n;i++){
		min=1000000000;
		for(j=0;j<m;j++){
			dis=abs(a[i]-c[j])+abs(b[i]-d[j]);
			if(min>dis){
				min=dis;
				num=j;
			}
		}
		cout<<num+1<<endl;
	}
	
	
	
	return 0;
}
