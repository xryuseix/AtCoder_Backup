問題文の引用元：https://atcoder.jp/contests/abc138/tasks/abc138_d
D - Ki / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 400 点
問題文 : 1 から N までの番号がついた N 個の頂点を持つ根付き木が与えられます。この木の根は頂点 1 で、i 番目の辺 (1 \leq i \leq N - 1) は頂点 a_i と頂点 b_i を結びます。各頂点にはカウンターが設置されており、はじめすべての頂点のカウンターの値は 0 です。これから、以下のような Q 回の操作が行われます。操作 j (1 \leq j \leq Q): 頂点 p_j を根とする部分木に含まれるすべての頂点のカウンターの値に x_j を足す。すべての操作のあとの各頂点のカウンターの値を求めてください。
制約2 \leq N \leq 2 \times 10^51 \leq Q \leq 2 \times 10^51 \leq a_i < b_i \leq N1 \leq p_j \leq N1 \leq x_j \leq 10^4与えられるグラフは木である。入力中の値はすべて整数である。入力入力は以下の形式で標準入力から与えられる。N Qa_1 b_1:a_{N-1} b_{N-1}p_1 x_1:p_Q x_Q出力すべての操作のあとの各頂点のカウンターの値を、頂点 1, 2, \ldots, N の順に空白区切りで出力せよ。



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <unordered_set>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define irep(it, stl) for(auto it = stl.begin(); it != stl.end(); it++)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STI(s) atoi(s.c_str())
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define itn int;
int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const int INF = INT_MAX;
const ll LLINF = 1LL<<60;
const ll MOD = 1000000007;
const double EPS = 1e-9;

void dfs(vvi &g, vi &sum, vi &pass, int pos, int num){
    sum[pos]+=num;
    // fin(pos);
    rep(i,g[pos].size()){
        if(pass[g[pos][i]]==1)continue;
        pass[g[pos][i]]=1;
        dfs(g,sum,pass,g[pos][i], sum[pos]);
    }
}

int main(void) {
    
    int n,q;
    cin>>n>>q;
    vi a(n),b(n);
    vvi g(n,vi(0));
    rep(i,n-1){
        cin>>a[i]>>b[i];
        a[i]--;b[i]--;
        g[a[i]].pb(b[i]);
        g[b[i]].pb(a[i]);
    }
    vi pass(n,0);
    vi sum(n,0);
    rep(i,q){
        int p,x;
        cin>>p>>x;
        sum[p-1]+=x;
    }
    pass[0]=1;
    dfs(g,sum,pass,0,0);
    rep(i,n){
        if(i==0)cout<<sum[i];
        else cout<<' '<<sum[i];
    }
    cout<<endl;
}
