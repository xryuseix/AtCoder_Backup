問題文の引用元：https://atcoder.jp/contests/dp/tasks/dp_f
F - LCSEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 100 点
問題文 : 文字列 s および t が与えられます。s の部分列かつ t の部分列であるような文字列のうち、最長のものをひとつ求めてください。注釈文字列 x の部分列とは、x から 0 個以上の文字を取り除いた後、残りの文字を元の順序で連結して得られる文字列のことです。
制約s および t は英小文字からなる文字列である。1 \leq |s|, |t| \leq 3000入力入力は以下の形式で標準入力から与えられる。st出力s の部分列かつ t の部分列であるような文字列のうち、最長のものをひとつ出力せよ。答えが複数ある場合、どれを出力してもよい。



#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <deque>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <vector>
#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int, int>> vpii;
typedef vector<pair<ll, ll>> vpll;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<vc> vvc;
typedef vector<vs> vvs;
typedef vector<vll> vvll;
typedef pair<int, int> P;
typedef map<int, int> mii;
typedef set<int> si;
#define rep(i, n) for (ll i = 0; i < (n); ++i)
#define rrep(i, n) for (int i = 1; i <= (n); ++i)
#define irep(it, stl) for (auto it = stl.begin(); it != stl.end(); it++)
#define drep(i, n) for (int i = (n)-1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p, q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define fi first
#define se second
// #include <atcoder/all>
// using namespace atcoder;
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T, class U>
inline bool chmax(T& a, U b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T, class U>
inline bool chmin(T& a, U b) {
    if (a > b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T>
inline void dump(T& v) {
    if (v.size() > 100) {
        cout << "ARRAY IS TOO LARGE!!!" << endl;
    } else {
        irep(i, v) { cout << (*i) << ((i == --v.end()) ? '\n' : ' '); }
    }
}
template <class T, class U>
inline void dump(map<T, U>& v) {
    if (v.size() > 100) {
        cout << "ARRAY IS TOO LARGE!!!" << endl;
    } else {
        irep(i, v) { cout << i->first << " " << i->second << '\n'; }
    }
}
template <class T, class U>
inline void dump(pair<T, U>& p) {
    cout << p.first << " " << p.second << '\n';
}
inline void yn(const bool b) { b ? fin("yes") : fin("no"); }
inline void Yn(const bool b) { b ? fin("Yes") : fin("No"); }
inline void YN(const bool b) { b ? fin("YES") : fin("NO"); }
const int INF = INT_MAX;
constexpr ll LLINF = 1LL << 61;
constexpr ll MOD = 1000000007;  // 998244353;  //
constexpr ld EPS = 1e-11;

/* --------------------   ここまでテンプレ   -------------------- */

string lcs(string s, string t) {
    vvi dp(s.size() + 1, vi(t.size() + 1));

    for (int i = 0; i < s.size(); i++) {  // LCS
        for (int j = 0; j < t.size(); j++) {
            if (s[i] == t[j]) {
                dp[i + 1][j + 1] = dp[i][j] + 1;
            } else {
                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]);
            }
        }
    }
    // 復元
    string ans = "";
    int i = (int)s.size(), j = (int)t.size();
    while (i > 0 && j > 0) {
        // (i-1, j) -> (i, j) と更新されていた場合
        if (dp[i][j] == dp[i - 1][j]) {
            --i;  // DP の遷移を遡る
        }
        // (i, j-1) -> (i, j) と更新されていた場合
        else if (dp[i][j] == dp[i][j - 1]) {
            --j;  // DP の遷移を遡る
        }
        // (i-1, j-1) -> (i, j) と更新されていた場合
        else {
            ans = s[i - 1] + ans;
            --i, --j;  // DP の遷移を遡る
        }
    }
    return ans;
}

int main() {
    string s, t;
    cin >> s >> t;
    vvi dp(s.size() + 1, vi(t.size() + 1));
    vector<vpii> bef(s.size() + 1, vpii(t.size() + 1));
    rep(i, s.size()) {
        rep(j, t.size()) {
            if (s[i] == t[j]) {
                dp[i + 1][j + 1] = dp[i][j] + 1;
                bef[i + 1][j + 1] = mp(i, j);
            } else {
                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]);
                bef[i + 1][j + 1] =
                    (dp[i][j + 1] > dp[i + 1][j]) ? mp(i, j + 1) : mp(i + 1, j);
            }
        }
    }
    string ans = "";
    int x = s.size();
    int y = t.size();
    while (x > 0 && y > 0) {
        // cout << x << " " << y << endl;
        int bx = bef[x][y].first;
        int by = bef[x][y].second;
        if (x - bx == 1 && y - by == 1) ans += s[bx];
        x = bx;
        y = by;
    }
    reverse(all(ans));
    fin(ans);
}
