問題文の引用元：https://atcoder.jp/contests/dp/tasks/dp_k
K - Stones / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 100 点
問題文 : N 個の正整数からなる集合 A = \{ a_1, a_2, \ldots, a_N \} があります。太郎君と次郎君が次のゲームで勝負します。最初に、K 個の石からなる山を用意します。二人は次の操作を交互に行います。先手は太郎君です。A の元 x をひとつ選び、山からちょうど x 個の石を取り去る。先に操作を行えなくなった人が負けです。二人が最適に行動すると仮定したとき、どちらが勝つかを判定してください。
制約入力はすべて整数である。1 \leq N \leq 1001 \leq K \leq 10^51 \leq a_1 < a_2 < \cdots < a_N \leq K入力入力は以下の形式で標準入力から与えられる。N Ka_1 a_2 \ldots a_N出力先手の太郎君が勝つならば First を、後手の次郎君が勝つならば Second を出力せよ。27610



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <unordered_set>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STI(s) atoi(s.c_str())
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define itn int
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const ll MOD = 1000000007;
const double EPS = 1e-9;
const int INF = INT_MAX;
const ll LLINF = 1LL<<60;


int main(void) {

    int n, k;
    cin >> n >> k;
    vi v(n);
    rep(i, n) {
        cin >> v[i];
    }
    Sort(v);
    int dp[101010];
    
    // 残りの石がi個の時，勝利状態かチェックする
    for(int i = 0; i <= k; i++) { 
        for(int j = 0; j < n; j++) { //これは取れる石のかずループ
            if(i - v[j] >= 0) {
                /*
                    石を取った時，勝利状態ならとる．
                    この時の，dp[i - v[j]]はfalseである(相手が敗北条件なので)
                    だから，falseを反転させる．

                    石を取った時，敗北条件なら保留する．
                    この時の，dp[i - v[j]]はtrueである(相手が勝利条件なので)
                    これを反転させると，falseであり，falseはorをとっても影響を与えない(保留)
                */
                dp[i] |= !dp[i - v[j]];
            }
        }
    }
    if(dp[k]) fin("First");
    else fin("Second");    


}
