問題文の引用元：https://atcoder.jp/contests/arc097/tasks/arc097_b
D - EqualsEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 400 点
問題文 : 1 から N までの整数を並び替えた順列 p_1, p_2, .., p_N があります。また、 1 以上 N 以下の整数のペアが M 個与えられます。これらは (x_1,y_1), (x_2,y_2), .., (x_M,y_M) で表されます。シカの AtCoDeer くんは順列 p に次の操作を好きなだけ行って、 p_i = i となる i (1 ≤ i ≤ N) の数を最大にしようと考えています。1 ≤ j ≤ M なる j を選び、 p_{x_j} と p_{y_j} をスワップする操作後の p_i = i となる i の数として考えうる最大値を求めてください。
制約2 ≤ N ≤ 10^51 ≤ M ≤ 10^5p は 1 から N までの整数を並び替えた順列1 ≤ x_j,y_j ≤ Nx_j ≠ y_ji ≠ j なら、 \{x_i,y_i\} ≠ \{x_j,y_j\}入力は全て整数入力入力は以下の形式で標準入力から与えられる。N Mp_1 p_2 .. p_Nx_1 y_1x_2 y_2:x_M y_M出力操作後の p_i = i となる i (1 ≤ i ≤ N) の数として考えうる最大値を出力せよ。
// ソースコードの引用元 : https://atcoder.jp/contests/arc097/submissions/12556565
// 提出ID : 12556565
// 問題ID : arc097_b
// コンテストID : arc097
// ユーザID : xryuseix
// コード長 : 4708
// 実行時間 : 97



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <cassert>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <random>
#include <iomanip>
#include <unordered_set>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<pair<ll,ll> > vpll;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
typedef map<int, int> mii;
typedef set<int> si;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define arep(i,v) for(auto i : v)
#define irep(it, stl) for(auto it = stl.begin(); it != stl.end(); it++)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define itn int
// #define endl '\n';
#define fi first
#define se second
#define NONVOID [[nodiscard]]
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
template <class T> inline void dump(T &v){irep(i, v){cout<<*i<<((i==--v.end())?'\n':' ');}}
inline string getline(){string s; getline(cin,s); return s;}
inline void yn(const bool b){b?fin("yes"):fin("no");}
inline void Yn(const bool b){b?fin("Yes"):fin("No");}
inline void YN(const bool b){b?fin("YES"):fin("NO");}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const int INF = INT_MAX;
constexpr ll LLINF = 1LL<<60;
constexpr ll MOD = 1000000007;
constexpr double EPS = 1e-9;

class UnionFind {
public:
    // 親の番号を格納．親だった場合は-(その集合のサイズ)
    vector<int> Parent;
    // 重さの差を格納
    vector<ll> diffWeight;

    UnionFind(const int N) {
        Parent = vector<int>(N, -1);
        diffWeight = vector<ll>(N, 0);
    }

    // Aがどのグループに属しているか調べる
    int root(const int A) {
        if (Parent[A] < 0) return A;
        int Root = root(Parent[A]);
        diffWeight[A] += diffWeight[Parent[A]];
        return Parent[A] = Root;
    }

    // 自分のいるグループの頂点数を調べる
    int size(const int A) {
        return -Parent[root(A)];
    }

    // 自分の重さを調べる
    ll weight(const int A) {
        root(A); // 経路圧縮
        return diffWeight[A];
    }

    // 重さの差を計算する
    ll diff(const int A, const int B) {
        return weight(B) - weight(A);
    }

    // AとBをくっ付ける
    bool connect(int A, int B, ll W = 0) {
        // Wをrootとの重み差分に変更
        W += weight(A);
        W -= weight(B);

        // AとBを直接つなぐのではなく、root(A)にroot(B)をくっつける
        A = root(A);
        B = root(B);

        if (A == B) {
            //すでにくっついてるからくっ付けない
            return false;
        }

        // 大きい方(A)に小さいほう(B)をくっ付ける
        // 大小が逆だったらひっくり返す
        if (size(A) < size(B)) {
            swap(A, B);
            W = -W;
        }

        // Aのサイズを更新する
        Parent[A] += Parent[B];
        // Bの親をAに変更する
        Parent[B] = A;

        // AはBの親であることが確定しているのでBにWの重みを充てる
        diffWeight[B] = W;

        return true;
    }
};

int main() {

    int n,m;
    cin>>n>>m;
    UnionFind uni(n);
    vi v(n);
    rep(i,n){
        cin>>v[i];
        v[i]--;
    }
    rep(i,m){
        int a,b;
        cin>>a>>b;
        a--;
        b--;
        uni.connect(v[a],v[b]);
    }
    int ans=0;
    rep(i,n){
        if(uni.root(i)==uni.root(v[i])){
            ans++;
        }
    }
    fin(ans);
}

