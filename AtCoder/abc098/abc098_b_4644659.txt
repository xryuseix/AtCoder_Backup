問題文の引用元：https://atcoder.jp/contests/abc098/tasks/abc098_b
B - Cut and CountEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 200 点
問題文 : 英小文字からなる長さ N の文字列 S が与えられます。この文字列を一箇所で切断して、文字列 X と Y に分割します。このとき、「X と Y のどちらにも含まれている文字」の種類数を最大化したいです。文字列を切断する位置を適切に決めた際の「X と Y のどちらにも含まれている文字」の種類数の最大値を求めてください。
制約2 \leq N \leq 100|S| = NS は英小文字からなる入力入力は以下の形式で標準入力から与えられる。NS出力「X と Y のどちらにも含まれている文字」の種類数の最大値を出力せよ。
// ソースコードの引用元 : https://atcoder.jp/contests/abc098/submissions/4644659
// 提出ID : 4644659
// 問題ID : abc098_b
// コンテストID : abc098
// ユーザID : xryuseix
// コード長 : 1254
// 実行時間 : 1



#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<string>
#include<vector>
#include<list>
#include<set>
#include<map>
#include<queue>
#include<stack>
#include<cctype>
#include<climits>
#include<bitset>
#define ld long double
//#define ll long long int
#define ull unsigned long long int
#define rep(i,n) for(i=0;i<n;i++)
#define fin(ans) cout<<(ans)<<endl
#define INF INT_MAX;
using namespace std;
template<class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
template<class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
const long long LLINF=1LL<<60;
//set<int>::iterator it;



int main(void){ios::sync_with_stdio(false);cin.tie(0);
//////////////////////////////////////////////////////
	
	int i,n,pos,max=0,ans;
	string s;
	set<char> se;
	cin>>n>>s;
	for(pos=0;pos<n;pos++){//pos文字目の後で切る 
		ans=0;
		for(i=0;i<=pos;i++){
			se.insert(s[i]);
		}
		for(i=pos+1;i<n;i++){
			if(se.find(s[i])!=se.end()){
				ans++;
				se.erase(s[i]);
			}
		}
		
		if(ans>max)max=ans;
		se.clear();
	}
	cout<<max<<endl;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//////////////////////////////////////////////////////
	return 0;
}
