問題文の引用元：https://atcoder.jp/contests/abc197/tasks/abc197_e
E - TravelerEditorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 500 点
問題文 : 数直線上にボール 1 からボール N までの N 個のボールがあります。ボール i は座標 X_i にあります。各ボールには 1 以上 N 以下の整数で表される色がついていて、ボール i の色は整数 C_i で表されます。今座標 0 にいるあなたは、毎秒 1 の速さで数直線上を動き、全てのボールを回収してから再び座標 0 に戻ります。このとき、ボールの色を表す整数を回収順に並べた時に広義単調増加となっている必要があります。ボールを回収するにはボールと同じ座標にいる必要がありますが、ボールを回収できる時に必ずしも回収する必要はありません。座標 0 を出発してから、全てのボールを回収して再び座標 0 に戻るまでにかかる時間の最小値を求めてください。  
制約1 \le N \le 2 \times 10^5|X_i| \le 10^9X_i \neq X_j (i \neq j)X_i \neq 01 \le C_i \le N入力に含まれる値は全て整数である入力入力は以下の形式で標準入力から与えられる。NX_1 C_1X_2 C_2X_3 C_3\hspace{15pt} \vdotsX_N C_N出力答え [秒] を出力せよ。  



#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <deque>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <unordered_set>
#include <vector>
#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int, int>> vpii;
typedef vector<pair<ll, ll>> vpll;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<vc> vvc;
typedef vector<vs> vvs;
typedef vector<vll> vvll;
typedef pair<int, int> P;
typedef map<int, int> mii;
typedef set<int> si;
#define rep(i, n) for (ll i = 0; i < (n); ++i)
#define rrep(i, n) for (int i = 1; i <= (n); ++i)
#define irep(it, stl) for (auto it = stl.begin(); it != stl.end(); it++)
#define drep(i, n) for (int i = (n)-1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p, q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define fi first
#define se second
// #include <atcoder/all>
// using namespace atcoder;
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T, class U>
inline bool chmax(T& a, U b) {
    if (a < b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T, class U>
inline bool chmin(T& a, U b) {
    if (a > b) {
        a = b;
        return 1;
    }
    return 0;
}
template <class T, class U>
ostream& operator<<(ostream& os, pair<T, U>& p) {
    cout << "(" << p.first << ", " << p.second << ")";
    return os;
}
template <class T>
inline void dump(T& v) {
    if (v.size() > 100) {
        cout << "ARRAY IS TOO LARGE!!!" << endl;
    } else {
        irep(i, v) { cout << (*i) << ((i == --v.end()) ? '\n' : ' '); }
    }
}
template <class T, class U>
inline void dump(map<T, U>& v) {
    if (v.size() > 100) {
        cout << "ARRAY IS TOO LARGE!!!" << endl;
    } else {
        irep(i, v) { cout << i->first << " " << i->second << '\n'; }
    }
}
template <class T, class U>
inline void dump(pair<T, U>& p) {
    cout << p.first << " " << p.second << '\n';
}
inline void yn(const bool b) { b ? fin("yes") : fin("no"); }
inline void Yn(const bool b) { b ? fin("Yes") : fin("No"); }
inline void YN(const bool b) { b ? fin("YES") : fin("NO"); }
const int INF = INT_MAX;
constexpr ll LLINF = 1LL << 61;
constexpr ll MOD = 1000000007;  // 998244353;  //
constexpr ld EPS = 1e-11;

/* --------------------   ここまでテンプレ   -------------------- */

map<ll, ll> zip;
int compress(vector<ll> x) {
    int unzip[x.size()];
    sort(x.begin(), x.end());
    x.erase(unique(x.begin(), x.end()), x.end());
    for (int i = 0; i < x.size(); i++) {
        zip[x[i]] = i + 1;
        unzip[i] = x[i];
    }
    return x.size();
}

int main() {
    int n;
    cin >> n;
    vll x(n), c(n);
    ll MAX = 0;
    rep(i, n) cin >> x[i] >> c[i];
    compress(c);
    rep(i, n) {
        c[i] = zip[c[i]];
        chmax(MAX, c[i]);
    }
    MAX++;
    vll l(MAX + 1, INF), r(MAX + 1, -INF);
    vvll dp(MAX + 1, vll(2, LLINF));
    rep(i, n) {
        chmin(l[c[i]], x[i]);
        chmax(r[c[i]], x[i]);
    }
    l[0] = l[MAX] = r[0] = r[MAX] = 0;
    dp[0][0] = dp[0][1] = 0;
    rep(i, dp.size() - 1) {
        // 上の段
        ll pos_up = r[i];
        //   上を更新
        ll npos1 = min(l[i + 1], pos_up);
        chmin(dp[i + 1][0],
              dp[i][0] + abs(npos1 - pos_up) + (r[i + 1] - npos1));
        //   下を更新
        ll npos2 = max(r[i + 1], pos_up);
        chmin(dp[i + 1][1],
              dp[i][0] + abs(npos2 - pos_up) + (npos2 - l[i + 1]));

        // 下の段
        ll pos_dn = l[i];
        //   上を更新
        ll npos3 = min(l[i + 1], pos_dn);
        chmin(dp[i + 1][0],
              dp[i][1] + abs(npos3 - pos_dn) + (r[i + 1] - npos3));
        //   下を更新
        ll npos4 = max(r[i + 1], pos_dn);
        chmin(dp[i + 1][1],
              dp[i][1] + abs(npos4 - pos_dn) + (npos4 - l[i + 1]));
    }
    cout << min(dp[MAX][0], dp[MAX][1]) << endl;
    // dump(l);
    // dump(r);
    // rep(i, MAX + 1) dump(dp[i]);
}
