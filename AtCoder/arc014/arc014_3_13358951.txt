問題文の引用元：https://atcoder.jp/contests/arc014/tasks/arc014_3
C - 魂の還る場所Editorial / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 64 MB
問題文 : 高橋君が大好きなプラスチック製の円筒と不思議な赤青緑3色のボールがある。このボールはぎりぎり円筒に入れることができる大きさである。円筒の両端を便宜上、右と左と呼ぶことにすると、左右好きな方からボールを入れることができる。このボールは同じ色のボールと接触すると消える性質を持っている。さらに、これら 3 色の複数個のボールを入れる順番のみが決まっている時、それぞれのボールを左右のどちらから入れるかによって全てのボールを入れ終わった後に残るボールの数が変化する。3 色の複数個のボールを入れる順番のみが与えられ、最後に円筒に残るボールの数が最小になるよう計画したとき、円筒に残るボール数の最小値を答えよ。入力入力は以下の形式で標準入力から与えられる。NS1 行目にはボールの数を表す整数 N(1≦N≦50) が与えられる。2 行目には入れるボールの順番 S が与えられ、 R は赤、 G は緑、 B は青色のボールを表す。 S は R, G, B の 3 種類の文字のみが N 文字で構成される。部分点1≦N≦15 を満たす入力にのみ正解した場合、部分点として 30 点が与えられる。出力最後に残るボールの数が最小になるように計画を行った時、その残る最小の数を 1 行で出力すること。また、出力の最後には改行をいれること。 
// ソースコードの引用元 : https://atcoder.jp/contests/arc014/submissions/13358951
// 提出ID : 13358951
// 問題ID : arc014_3
// コンテストID : arc014
// ユーザID : xryuseix
// コード長 : 3149
// 実行時間 : 1



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <cassert>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <random>
#include <iomanip>
#include <unordered_set>
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<pair<ll,ll> > vpll;
typedef vector<vector<int> > vvi;
typedef vector<vector<char> > vvc;
typedef vector<vector<string> > vvs;
typedef vector<vector<ll> > vvll;
typedef map<int,int> mii;
typedef set<int> si;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define arep(i,v) for(auto i : v)
#define irep(it, stl) for(auto it = stl.begin(); it != stl.end(); it++)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define itn int
// #define endl '\n';
#define fi first
#define se second
#define NONVOID [[nodiscard]]
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
template <class T> inline void dump(T &v){irep(i, v){cout<<*i<<((i==--v.end())?'\n':' ');}}
inline string getline(){string s; getline(cin,s); return s;}
inline void yn(const bool b){b?fin("yes"):fin("no");}
inline void Yn(const bool b){b?fin("Yes"):fin("No");}
inline void YN(const bool b){b?fin("YES"):fin("NO");}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const int INF = INT_MAX;
constexpr ll LLINF = 1LL<<60;
constexpr ll MOD = 1000000007;
constexpr double EPS = 1e-9;



int main() {
    deque<char> d;
    int n;
    cin >> n;
    string s;
    cin >> s;
    rep(i, n){
        if(d.size() == 0) {
            d.push_back(s[i]);
         }else if(d.front() == s[i]) {
            d.pop_front();
        } else if(d.back() == s[i]) {
            d.pop_back();
        } else if(d.size() == 1) {
            d.push_back(s[i]);
        } else if(i < n - 1 && s[i] == s[i + 1]) {
            i++;
            continue;
        } else if(i == n - 1) {
            d.push_back(s[i]);
        } else {
            char next = s[i + 1];
            if(next == d.front()){
                d.push_back(s[i]);
            } else {
                d.push_front(s[i]);
            }
        }
    }
    fin(d.size());
}






