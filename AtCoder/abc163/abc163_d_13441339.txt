問題文の引用元：https://atcoder.jp/contests/abc163/tasks/abc163_d
D - Sum of Large Numbers / $(function() {var ts = $('#task-statement span.lang');if (ts.children('span').size() <= 1) {$('#task-lang-btn').hide();ts.children('span').show();return;}var REMEMBER_LB = 5;var LS_KEY = 'task_lang';var taskLang = getLS(LS_KEY) || '';var changeTimes = 0;if (taskLang == 'ja' || taskLang == 'en') {changeTimes = REMEMBER_LB;} else {var changeTimes = parseInt(taskLang, 10);if (isNaN(changeTimes)) {changeTimes = 0;delLS(LS_KEY);}changeTimes++;taskLang = LANG;}ts.children('span.lang-' + taskLang).show();$('#task-lang-btn span').click(function() {var l = $(this).data('lang');ts.children('span').hide();ts.children('span.lang-' + l).show();if (changeTimes < REMEMBER_LB) setLS(LS_KEY, changeTimes);else setLS(LS_KEY, l);});});
Time Limit : 2 sec / Memory Limit : 1024 MB
配点 : 400 点
問題文 : 10^{100}, 10^{100}+1, ..., 10^{100}+N の N+1 個の数があります。この中から K 個以上の数を選ぶとき、その和としてあり得るものの個数を \bmod (10^9+7) で求めてください。
制約1 \leq N \leq 2\times 10^51 \leq K \leq N+1入力は全て整数入力入力は以下の形式で標準入力から与えられる。N K出力和としてあり得るものの個数を \bmod (10^9+7) で出力せよ。



#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cctype>
#include <cassert>
#include <climits>
#include <string>
#include <bitset>
#include <cfloat>
#include <random>
#include <iomanip>
#include <unordered_set>
using namespace std;
typedef long double ld;
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef vector<string> vs;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vpii;
typedef vector<pair<ll,ll> > vpll;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<vc> vvc;
typedef vector<vs> vvs;
typedef vector<vll> vvll;
typedef map<int,int> mii;
typedef set<int> si;
#define rep(i,n) for(int i = 0; i < (n); ++i)
#define rrep(i,n) for(int i = 1; i <= (n); ++i)
#define arep(i,v) for(auto i : v)
#define irep(it, stl) for(auto it = stl.begin(); it != stl.end(); it++)
#define drep(i,n) for(int i = (n) - 1; i >= 0; --i)
#define fin(ans) cout << (ans) << '\n'
#define STLL(s) strtoll(s.c_str(), NULL, 10)
#define mp(p,q) make_pair(p, q)
#define pb(n) push_back(n)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define Sort(a) sort(a.begin(), a.end())
#define Rort(a) sort(a.rbegin(), a.rend())
#define MATHPI acos(-1)
#define fi first
#define se second
constexpr int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};
constexpr int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};
template <class T> inline bool chmax(T& a,T b){if(a<b){a=b;return 1;} return 0;}
template <class T> inline bool chmin(T& a,T b){if(a>b){a=b;return 1;} return 0;}
template <class T> inline void dump(T &v){irep(i, v){cout<<*i<<((i==--v.end())?'\n':' ');}}
inline string getline(){string s; getline(cin,s); return s;}
inline void yn(const bool b){b?fin("yes"):fin("no");}
inline void Yn(const bool b){b?fin("Yes"):fin("No");}
inline void YN(const bool b){b?fin("YES"):fin("NO");}
struct io{io(){ios::sync_with_stdio(false);cin.tie(0);}};
const int INF = INT_MAX;
constexpr ll LLINF = 1LL<<60;
constexpr ll MOD = 1000000007;
constexpr double EPS = 1e-9;

struct mint {
    ll x;
    mint(ll _x = 0):x((_x % MOD + MOD) % MOD) {}

    /* 初期化子 */
    mint operator+() const {
    return mint(x);
    }
    mint operator-() const {
    return mint(-x);
    }

    /* 代入演算子 */
    mint& operator+=(const mint a) {
        if ((x += a.x) >= MOD) x -= MOD;
        return *this;
    }
    mint& operator-=(const mint a) {
        if ((x += MOD - a.x) >= MOD) x -= MOD;
        return *this;
    }
    mint& operator*=(const mint a) {
        (x *= a.x) %= MOD;
        return *this;
    }
    mint& operator/=(const mint a) {
        x *= modinv(a).x;
        return (*this);
    }
    mint& operator%=(const mint a) {
        x %= a.x;
        return (*this);
    }
    mint& operator++() {
        ++x;
        if(x >= MOD) x -= MOD;
        return *this;
    }
    mint& operator--() {
        if(!x) x += MOD;
        --x;
        return *this;
    }
    mint& operator&=(const mint a) {
        x &= a.x;
        return (*this);
    }
    mint& operator|=(const mint a) {
        x |= a.x;
        return (*this);
    }
    mint& operator^=(const mint a) {
        x ^= a.x;
        return (*this);
    }
    mint& operator<<=(const mint a) {
        x *= pow(2, a).x;
        return (*this);
    }
    mint& operator>>=(const mint a) {
        x /= pow(2, a).x;
        return (*this);
    }

    /* 算術演算子 */
    mint operator+(const mint a) const {
        mint res(*this);
        return res+=a;
    }
    mint operator-(const mint a) const {
        mint res(*this);
        return res-=a;
    }
    mint operator*(const mint a) const {
        mint res(*this);
        return res*=a;
    }
    mint operator/(const mint a) const {
        mint res(*this);
        return res/=a;
    }
    mint operator%(const mint a) const {
        mint res(*this);
        return res%=a;
    }
    mint operator&(const mint a) const {
        mint res(*this);
        return res&=a;
    }
    mint operator|(const mint a) const {
        mint res(*this);
        return res|=a;
    }
    mint operator^(const mint a) const {
        mint res(*this);
        return res^=a;
    }
    mint operator<<(const mint a) const {
        mint res(*this);
        return res<<=a;
    }
    mint operator>>(const mint a) const {
        mint res(*this);
        return res>>=a;
    }

    /* 条件演算子 */
    bool operator==(const mint a) const noexcept {
        return x == a.x;
    }
    bool operator!=(const mint a) const noexcept {
        return x != a.x;
    }
    bool operator<(const mint a) const noexcept {
        return x < a.x;
    }
    bool operator>(const mint a) const noexcept {
        return x > a.x;
    }
    bool operator<=(const mint a) const noexcept {
        return x <= a.x;
    }
    bool operator>=(const mint a) const noexcept {
        return x >= a.x;
    }

    /* ストリーム挿入演算子 */
    friend istream& operator>>(istream& is, mint& m) {
        is >> m.x;
        m.x = (m.x % MOD + MOD) % MOD;
        return is;
    }
    friend ostream& operator<<(ostream& os, const mint& m) {
        os << m.x;
        return os;
    }

    /* その他の関数 */
    mint modinv(mint a) {
        return pow(a, MOD - 2);
    }
    mint pow(mint x, mint n){
        mint res = 1;
        while(n.x > 0){
            if((n%2).x) res *= x;
            x *= x;
            n.x /= 2;
        }
        return res;
    }
};



int main() {
    
    mint ans=0;
    mint n,k;
    int N,K;
    cin>>N>>K;
    n.x=N;k.x=K;
    ++n;
    for(mint i=k;i.x<=n.x;++i){
        mint a=(n.x)*(n.x-1)/2;
        mint b=(n.x-i.x)*(n.x-i.x-1)/2;
        mint c=(i.x)*(i.x-1)/2;
        // cout<<i<<" "<<a<<" "<<b<<" "<<c<<endl;
        ans+=a+1-b-c;
    }
    fin(ans);
}






